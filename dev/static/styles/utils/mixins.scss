@mixin size($a,$b: $a) {
  width: $a;
  height: $b;
}

@mixin placeholder {
  ::-webkit-input-placeholder {@content}
  :-moz-placeholder           {@content}
  ::-moz-placeholder          {@content}
  :-ms-input-placeholder      {@content}
}

@mixin media-container($windows-size) {
  @if map_has_key($bootstrap-breackpoints, $windows-size) {
    @media screen and (max-width: map-get($bootstrap-breackpoints, $windows-size)) {
      .container {
        max-width: map-get($bootstrap-max-width, $windows-size);
      }
    }
  }
}

@mixin push--auto {
  margin: { 
      left: auto;
      right: auto;
  }
}

@mixin pseudo($display: block, $pos: absolute, $content: ''){
  content: $content;
  display: $display;
  position: $pos;
}

@function z($name) {
  @if index($z-indexes, $name) {
      @return (length($z-indexes) - index($z-indexes, $name)) + 1;
  } @else {
      @warn 'There is no item "#{$name}" in this list; choose one of: #{$z-indexes}';
      @return null;
  }
}
$z-indexes: (
  "modal",
  "nav-bar",
  "header-content",
  "header-pagination",
  "darken-layer",
  "page-wrapper",
  "site-footer"
);

@mixin font-face($font-family, $file-path, $weight: normal, $style: normal, $asset-pipeline: false ) {
	@font-face {
		font-family: $font-family;
		font-weight: $weight;
		font-style: $style;

		@if $asset-pipeline == true {
			src: font-url('#{$file-path}.eot');
			src: font-url('#{$file-path}.eot?#iefix') format('embedded-opentype'), font-url('#{$file-path}.woff') format('woff'), font-url('#{$file-path}.ttf') format('truetype');
    } 
		@else {
			src: url('#{$file-path}.eot');
			src: url('#{$file-path}.eot?#iefix') format('embedded-opentype'), url('#{$file-path}.woff') format('woff'), url('#{$file-path}.ttf') format('truetype');
    }
  }
}

@mixin darken-layer($opacity: .6) {
  position: absolute;
  left: 0;
  top: 0;
  width: 100%;
  height: 100%;
  background-color: $darken-layer-bg;
  opacity: $opacity;
  z-index: z("darken-layer");
}